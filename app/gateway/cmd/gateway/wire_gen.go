// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"kratos_sample/app/gateway/internal/conf"
	"kratos_sample/app/gateway/internal/router"
	"kratos_sample/app/gateway/internal/router/device"
	"kratos_sample/app/gateway/internal/server"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

func wireApp(confServer *conf.Server, etcd *conf.Etcd, service *conf.Service, data *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	registrar, cleanup, err := router.NewRegistrar(etcd)
	if err != nil {
		return nil, nil, err
	}
	discovery := router.NewDiscovery(etcd)
	deviceClient := router.NewDeviceServiceClient(discovery, service)
	serviceClients := router.NewServiceClients(deviceClient)
	userClient := router.NewUserServiceClient(discovery, service)
	deviceHandler := device.NewDeviceHandler(deviceClient, userClient, data, logger)
	routerRouter, cleanup2, err := router.NewRouter(logger, serviceClients, deviceHandler)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	httpServer := server.NewHTTPServer(confServer, routerRouter)
	app := newApp(registrar, logger, httpServer)
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}
